<?xml version="1.0" encoding="UTF-8"?>
<!-- 使用前，请好好查看配置文件说明及使用说明-->
<configure>
	<global>
		<!--生成代码路径 ,默认项目所在目录-->
		<property name="baseDir" value="f:\\code" />
		<!--基础包名，默认mapleLeaf.code-->
		<property name="basePackage" value="com.test" />
		<!-- 需要去掉的全局表名前缀，多个逗号分隔 ,默认""-->
		<property name="baseTabPrefix" value="sys_" />
		<!-- 需要去掉的全局字段名名前缀，多个逗号分隔 ,默认""-->
		<property name="baseColPrefix" value="" />
		<!-- 表字段是否下划线转驼峰命名 ，默认false-->
		<property name="columnCamel" value="true" />
		<!-- 持久层框架(mybatis,hibernate,other)，默认"mybatis" -->
		<property name="persistence" value="mybatis" />
		<!-- 一些公共类，工具类,父类等原样输出，不必需(包名=模板文件名(也是类名)，多个逗号隔开) -->
		<!-- 这里配置了分页类，mybatis分页拦截器, mybatis通用配置-->
		<!--  
		<common>common=Page,common=PageInterceptor,resource=Xml_mybatis</common>
		-->
	</global>

	<!-- 数据库配置 -->
	<db>
		<!-- 数据库类型(mysql,oracle,sqlserver,postgresql,informix) -->
		<dbType>mysql</dbType>
		<!-- 数据库名 -->
		<dbName>demo2</dbName>
		<user>root</user>
		<pwd>q123</pwd>
		<driver>com.mysql.jdbc.Driver</driver>
		<url><![CDATA[jdbc:mysql://localhost:3306/demo2?useUnicode=true&characterEncoding=UTF-8]]></url>
	</db>

	<!-- 模块化配置，可以配置多个module,
			各模块相互独立,name属性为模块名 -->
	<module name="test">
		<!-- 
			package标签 主要支持大多数  dao,service,controller 三层架构
			包名配置，如果为空或没配置，则该包对应的类不会生成代码 
		-->
		<package>
			<property name="entityPkg" value="entity"/>
			<property name="daoPkg" value="dao"/>
			<property name="servicePkg" value="service"/>
			<property name="controllerPkg" value="controller"/>
			<property name="mapperPkg" value="mapper"/>
		</package>
		<!--
			customArea自定义区域 ，只要提供模板，任意生成代码，可以说 不仅仅生成 java语言
		-->
		<customArea>
			<!-- 自定义生成，可以配置多组标签，不限于java语言，属性customPkg包名，属性suffix 文件后缀;
				标签内容为模板文件(不需要后缀)，多个逗号分隔-->
			<codeFile customPkg="page" suffix="jsp">Jsp_list,Jsp_add，Jsp_view</codeFile>
			<!-- 自定义参数设置 ，模板中可以通过${param['author']!}获取参数值 -->
			<param key="author" value="mapleLeaf"></param>
		</customArea>
		
		<!-- table配置表，属性tabName表名，
			  exclude排除指定模板代码生成，多个逗号分隔（dao,service,controller,entity,custom）-->
		<table tabName="sys_user">
			<!-- 
			ref标签（单向）  关联表，如果需要双向关联  两个table都需配置对应对方的ref
			ref所对应的 tabName，必须配置table
			ref标签内容为 主表字段=关联表字段，默认可以多组，逗号分隔（推荐单组字段）（多对多时，则为 主表字段=中间表字段）
			多对多时：需配置midTabName和midRefCol属性
			midTabName中间表 不用配置table;midRefCol属性为（中间表字段=关联表字段）
			多对一时：需配置forKey 主表的关联字段（即外键）
			一对一时：关联字段（即外键）是否在 主表中，如果是，则配置forKey
			-->
			<ref tabName="sys_role" type="ManyToMany" midTabName="sys_user_role" midRefCol="role_id=role_id">
				user_id=user_id
			</ref>
			<ref tabName="sys_dept" type="ManyToOne" forKey="dept_id">dept_id=dept_id</ref>
			<ref tabName="sys_user_info" type="OneToOne" forKey="user_info_id">
			user_info_id=user_info_id
			</ref>
			<!-- columnGroup字段集合标签，对字段属性设置
				exclude属性：排除字段，多个字段逗号分隔，以下属性一样。
				searchPos属性：页面查询条件；listPos属性：页面查询结果列表；inputPos属性：页面表单输入
			 -->
			<columnGroup searchPos="login_name,status" 
				inputPos="user_id,login_name,email,phonenumber,sex,status">
				<!-- 
					column字段标签，可自定义字段属性。
					colName：字段名；tagType：表单类型，默认text；labelName：字段文本
					column标签内容：字段值
				 -->
				<column colName="sex" tagType="radio" labelName="性别">
					0=男，1=女</column>
				<column colName="remark" tagType="textarea" />
			</columnGroup>
		</table>
		
		<table tabName="sys_role">
			<ref tabName="sys_user" type="ManyToMany" midTabName="sys_user_role" midRefCol="user_id=user_id">
				role_id=role_id
			</ref>
		</table>
		
		<table tabName="sys_dept" exclude="custom">
			<ref tabName="sys_user" type="OneToMany">dept_id=dept_id</ref>
		</table>
		
		<table tabName="sys_user_info"></table>
	</module>
</configure>